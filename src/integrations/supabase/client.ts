
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hhkabxkelgabcsczsljf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhoa2FieGtlbGdhYmNzY3pzbGpmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAxNTk4NjEsImV4cCI6MjA1NTczNTg2MX0.qs_R_XUTkDcxltdlj7ZABrHMSCaGFYstxTkXUCCKghU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false, // Disable automatic URL parsing to handle it manually
    storage: localStorage,
    flowType: 'pkce' // Enable PKCE flow for enhanced security
  }
});

// Helper function to handle type casting for IDs in Supabase queries
export function cast<T>(value: T): T {
  return value as T;
}

// Create typed versions of common Supabase methods to avoid TS errors
export const supabaseTyped = {
  from: supabase.from,
  auth: supabase.auth,
  storage: supabase.storage,
  functions: supabase.functions,
  rpc: supabase.rpc,
  // Typed select method for easier querying
  select: <T>(table: string, options?: any) => {
    return supabase.from(table).select(options) as unknown as Promise<{ data: T | null; error: Error | null }>;
  }
};
