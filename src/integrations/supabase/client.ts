
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hhkabxkelgabcsczsljf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhoa2FieGtlbGdhYmNzY3pzbGpmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAxNTk4NjEsImV4cCI6MjA1NTczNTg2MX0.qs_R_XUTkDcxltdlj7ZABrHMSCaGFYstxTkXUCCKghU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: localStorage,
    flowType: 'pkce',
    // Storage options directly in the auth config
    storageKey: 'planzo-auth'
  }
});

// Helper function to check for auth-related parameters in URL
export const hasAuthParamsInUrl = () => {
  const url = new URL(window.location.href);
  const hashParams = new URLSearchParams(url.hash.substring(1));
  const queryParams = new URLSearchParams(url.search);
  
  // Check common auth params in both hash and query params
  const authParams = [
    'access_token', 'refresh_token', 'provider_token', 'error_description',
    'code', 'token_type', 'expires_in', 'type', 'flow'
  ];
  
  return authParams.some(param => 
    hashParams.has(param) || queryParams.has(param) ||
    url.hash.includes(`${param}=`) || url.search.includes(`${param}=`)
  );
};

// Helper function specifically to detect password recovery flows
export const isPasswordResetFlow = () => {
  const url = new URL(window.location.href);
  const hashParams = new URLSearchParams(url.hash.substring(1));
  const queryParams = new URLSearchParams(url.search);
  
  // Check for recovery-specific parameters
  const isRecoveryType = 
    hashParams.get('type') === 'recovery' || 
    queryParams.get('type') === 'recovery' ||
    hashParams.get('flow') === 'recovery' || 
    queryParams.get('flow') === 'recovery';
    
  // Check for access tokens which might be part of recovery process
  const hasTokens = 
    hashParams.has('access_token') || 
    queryParams.has('access_token') ||
    hashParams.has('refresh_token') || 
    queryParams.has('refresh_token');
  
  // Also check for token in the URL path which indicates reset password flow
  const hasTokenInPath = url.pathname.includes('/auth/reset-password') || 
                        url.pathname.includes('/reset-password');
  
  return isRecoveryType || (hasTokens && (url.pathname === '/auth' || url.pathname === '/')) || hasTokenInPath;
};

// Helper function to handle type casting for IDs in Supabase queries
export function cast<T>(value: T): T {
  return value as T;
}

// Create typed versions of common Supabase methods to avoid TS errors
export const supabaseTyped = {
  from: supabase.from,
  auth: supabase.auth,
  storage: supabase.storage,
  functions: supabase.functions,
  rpc: supabase.rpc,
  // Type-safe alternatives for common queries
  selectFrom: <T extends keyof Database['public']['Tables']>(
    table: T,
    columns?: string
  ) => {
    return supabase
      .from(table)
      .select(columns || '*');
  }
};

